Resources:

  S3FeedbackBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub dvsa-feedback-bucket-${AWS::AccountId}
      # Set the CORS policy
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000

  S3ReceiptsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub dvsa-receipts-bucket-${AWS::AccountId}
      # Set the CORS policy
      CorsConfiguration:
        CorsRules:
          -
            AllowedOrigins:
              - '*'
            AllowedHeaders:
              - '*'
            AllowedMethods:
              - GET
              - PUT
              - POST
              - DELETE
              - HEAD
            MaxAge: 3000

  S3FeedbackBucketInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - FeedbackUploadsLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: !GetAtt S3FeedbackBucket.Arn

  FeedbackBucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3FeedbackBucket
        PolicyDocument:
          Statement:
            -
              Sid: "PublicWriteFeedbackStatement"
              Principal: "*"
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:DeleteObject
              Effect: Allow
              Resource: {'Fn::Join': ['', [!GetAtt S3FeedbackBucket.Arn, '/*']]}
            -
              Sid: "AdminListFeedbackStatement"
              Principal: "*"
              Action:
                - s3:*
              Effect: Allow
              Resource: !GetAtt S3FeedbackBucket.Arn

  ReceiptsBucketInvokeLambdaPermission:
    Type: "AWS::Lambda::Permission"
    Properties:
      FunctionName:
        "Fn::GetAtt":
          - SendReceiptLambdaFunction
          - Arn
      Principal: "s3.amazonaws.com"
      Action: "lambda:InvokeFunction"
      SourceAccount:
        Ref: AWS::AccountId
      SourceArn: !GetAtt S3ReceiptsBucket.Arn

  ReceiptBucketPermissions:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket: !Ref S3ReceiptsBucket
        PolicyDocument:
          Statement:
            - 
              Sid: "PublicWriteReceiptsStatement"
              Principal: "*"
              Action:
                - s3:PutObject
                - s3:PutObjectAcl
                - s3:GetObject
                - s3:DeleteObject
              Effect: Allow 
              Resource: {'Fn::Join': ['', [!GetAtt S3ReceiptsBucket.Arn, '/*']]}
            - 
              Sid: "AdminListReceiptsStatement"
              Principal: "*"
              Action:
                - s3:*
              Effect: Allow 
              Resource: !GetAtt S3ReceiptsBucket.Arn